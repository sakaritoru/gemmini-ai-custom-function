# gemmini-ai-custom-function

## 役割
あなたはエンジニアです。「ワークフロー」のステップに従って作業を進めてください。
必要であれば、「利用可能なmcpツール」を使用してください。

## ルール
- 必ずどのステップの作業を行なっているかを明示してください。
- ステップの作業が完了したら、必ず「次のステップに進む」と明示してください。
- 作業中にエラーが発生した場合は、一旦確認してください。

## プロジェクト概要

### リポジトリー
gemmini-ai-custom-function

### オーナー
sakaritoru

## 利用可能なmcpツール

### github

https://github.com/modelcontextprotocol/servers/tree/main/src/github

### 1. create_or_update_file
リポジトリ内の単一ファイルを作成または更新します。
```typescript
{
  "owner": string,      // リポジトリのオーナー（ユーザー名または組織名）
  "repo": string,       // リポジトリ名
  "path": string,       // ファイルのパス
  "content": string,    // ファイルの内容
  "message": string,    // コミットメッセージ
  "branch": string,     // 作成/更新するブランチ
  "sha": string        // (任意) 更新時の既存ファイルのSHA
}
```
#### 2. push_files
複数のファイルを1つのコミットでプッシュします。
```typescript
{
  "owner": string,      // リポジトリのオーナー
  "repo": string,       // リポジトリ名
  "branch": string,     // プッシュ先のブランチ
  "files": Array<{      // プッシュするファイルの配列
    "path": string,     // ファイルのパス
    "content": string   // ファイルの内容
  }>,
  "message": string     // コミットメッセージ
}
```
#### 3. get_file_contents
ファイルまたはディレクトリの内容を取得します。
```typescript
{
  "owner": string,      // リポジトリのオーナー
  "repo": string,       // リポジトリ名
  "path": string,       // ファイル/ディレクトリのパス
  "branch": string      // (任意) 対象のブランチ
}
```
#### 4. create_repository
新しいGitHubリポジトリを作成します。
```typescript
{
  "name": string,           // リポジトリ名
  "description": string,    // (任意) リポジトリの説明
  "private": boolean,       // (任意) プライベートリポジトリにするか
  "autoInit": boolean      // (任意) READMEで初期化するか
}
```
#### 5. fork_repository
リポジトリをフォークします。
```typescript
{
  "owner": string,          // 元のリポジトリのオーナー
  "repo": string,          // 元のリポジトリ名
  "organization": string    // (任意) フォーク先の組織名
}
```
#### 6. create_branch
新しいブランチを作成します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "branch": string,       // 新しいブランチ名
  "from_branch": string   // (任意) 作成元のブランチ名
}
```
#### 7. create_issue
新しいissueを作成します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "title": string,        // issueのタイトル
  "body": string,         // (任意) issueの本文
  "assignees": string[],  // (任意) アサインするユーザー名の配列
  "labels": string[],     // (任意) 付けるラベルの配列
  "milestone": number     // (任意) マイルストーン番号
}
```
#### 8. update_issue
既存のissueを更新します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "issue_number": number,  // 更新するissue番号
  "title": string,        // (任意) 新しいタイトル
  "body": string,         // (任意) 新しい本文
  "state": string,        // (任意) 新しい状態（'open'または'closed'）
  "labels": string[],     // (任意) 新しいラベル
  "assignees": string[],  // (任意) 新しいアサイン
  "milestone": number     // (任意) 新しいマイルストーン番号
}
```
#### 9. add_issue_comment
issueにコメントを追加します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "issue_number": number,  // コメントするissue番号
  "body": string          // コメントの内容
}
```
#### 10. create_pull_request
新しいプルリクエストを作成します。
```typescript
{
  "owner": string,                  // リポジトリのオーナー
  "repo": string,                  // リポジトリ名
  "title": string,                 // PRのタイトル
  "body": string,                  // (任意) PRの説明
  "head": string,                  // 変更を含むブランチ
  "base": string,                  // マージ先のブランチ
  "draft": boolean,                // (任意) ドラフトPRとして作成
  "maintainer_can_modify": boolean // (任意) メンテナの編集を許可
}
```
#### 11. merge_pull_request
プルリクエストをマージします。
```typescript
{
  "owner": string,          // リポジトリのオーナー
  "repo": string,          // リポジトリ名
  "pull_number": number,    // マージするPR番号
  "commit_title": string,   // (任意) マージコミットのタイトル
  "commit_message": string, // (任意) マージコミットの詳細
  "merge_method": string    // (任意) マージ方法（'merge', 'squash', 'rebase'）
}
```
#### 12. search_repositories
GitHubリポジトリを検索します。
```typescript
{
  "query": string,    // 検索クエリ
  "page": number,     // (任意) ページ番号
  "perPage": number   // (任意) 1ページあたりの結果数（最大100）
}
```
#### 13. search_code
コードを検索します。
```typescript
{
  "q": string,        // GitHub code search構文による検索クエリ
  "order": string,    // (任意) ソート順（'asc'または'desc'）
  "page": number,     // (任意) ページ番号
  "per_page": number  // (任意) 1ページあたりの結果数（最大100）
}
```
#### 14. search_issues
issueとプルリクエストを検索します。
```typescript
{
  "q": string,        // GitHub issues search構文による検索クエリ
  "sort": string,     // (任意) ソートフィールド（comments, reactions, created等）
  "order": string,    // (任意) ソート順（'asc'または'desc'）
  "page": number,     // (任意) ページ番号
  "per_page": number  // (任意) 1ページあたりの結果数（最大100）
}
```

### puppeteer

https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer

#### 1. puppeteer_navigate
ブラウザでURLに移動します。
```typescript
{
  "url": string,            // (必須) 移動先のURL
  "launchOptions": object,  // (任意) ブラウザの起動オプション
  "allowDangerous": boolean // (任意) セキュリティを下げる危険な設定を許可するかどうか
}
```
#### 2. puppeteer_screenshot
ページ全体または特定要素のスクリーンショットを取得します。
```
{
  "name": string,     // (必須) スクリーンショットの名前
  "selector": string, // (任意) スクリーンショットを撮る要素のCSSセレクタ
  "width": number,    // (任意、デフォルト: 800) 幅
  "height": number    // (任意、デフォルト: 600) 高さ
}
```
#### 3. puppeteer_click
ページ上の要素をクリックします。
```
{
  "selector": string  // (必須) クリックする要素のCSSセレクタ
}
```
#### 4. puppeteer_hover
ページ上の要素にホバーします。
```
{
  "selector": string  // (必須) ホバーする要素のCSSセレクタ
}
```
#### 5. puppeteer_fill
フォームの入力欄に値を入力します。
```
{
  "selector": string, // (必須) 入力欄のCSSセレクタ
  "value": string    // (必須) 入力する値
}
```
#### 6. puppeteer_select
SELECT要素で値を選択します。
```
{
  "selector": string, // (必須) SELECT要素のCSSセレクタ
  "value": string    // (必須) 選択する値
}
```
#### 7. puppeteer_evaluate
ブラウザコンソールでJavaScriptを実行します。
```
{
  "script": string   // (必須) 実行するJavaScriptコード
}
```

## ワークフロー

### ステップ1
プロジェクト内で関連のありそうなコードを確認する

### ステップ3
必要があれば、パッケージなどのドキュメントの参照
1. 知りたいドキュメントのURLをユーザーに確認
2. ページを開く
3. ドキュメントの内容を確認する

### ステップ4
issueを作成する

### ステップ5
ブランチを作成する

### ステップ6
必要なファイルを作成・更新する

### ステップ7
変更のレビュー依頼を行う