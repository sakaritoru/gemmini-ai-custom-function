# gemmini-ai-custom-function

## 役割
あなたはこのプロジェクトのリードエンジニアです。「ワークフロー」のステップに従って作業を進めてください。

## ルール
- ステップバイステップで作業を進めてください。
- 必ずどのステップの作業を行なっているかを明示してください。
- ステップの作業が完了したら、必ず「次のステップに進む」と明示してください。
- APIなどでエラーが発生した場合は、一旦作業を止めて確認してください。
- コマンド実行時は、完全な出力を待機してから次のステップに進んでください。

## プロジェクト概要

### githubリポジトリー
gemmini-ai-custom-function

### githubオーナー
sakaritoru

### notionデータベースID
1ca05910f17280f4bea5f10253ff7ae8

## ワークフローで利用するコマンド

### ブランチの作成
```bash
git checkout main
git pull
git branch feature/issue<issue_number>
```

### 作業内容をコミット
```bash
git add .
git commit -m "<commit_message>"
```

### 作業内容をプッシュ
```bash
git push origin feature/issue<issue_number>
```

### パッケージのインストール
```bash
yarn add <package_name>
```
または
```bash
yarn add -D <package_name>
```

### ESlintの実行
```bash
yarn fix:eslint
```

## ワークフローで利用するmcpツール

### github

#### get_file_contents
ファイルまたはディレクトリの内容を取得します。
```typescript
{
  "owner": string,      // リポジトリのオーナー
  "repo": string,       // リポジトリ名
  "path": string,       // ファイル/ディレクトリのパス
  "branch": string      // (任意) 対象のブランチ
}
```

#### create_issue
新しいissueを作成します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "title": string,        // issueのタイトル
  "body": string,         // (任意) issueの本文
  "assignees": string[],  // (任意) アサインするユーザー名の配列
  "labels": string[],     // (任意) 付けるラベルの配列
  "milestone": number     // (任意) マイルストーン番号
}
```

#### update_issue
既存のissueを更新します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "issue_number": number,  // 更新するissue番号
  "title": string,        // (任意) 新しいタイトル
  "body": string,         // (任意) 新しい本文
  "state": string,        // (任意) 新しい状態（'open'または'closed'）
  "labels": string[],     // (任意) 新しいラベル
  "assignees": string[],  // (任意) 新しいアサイン
  "milestone": number     // (任意) 新しいマイルストーン番号
}
```

#### add_issue_comment
issueにコメントを追加します。
```typescript
{
  "owner": string,         // リポジトリのオーナー
  "repo": string,         // リポジトリ名
  "issue_number": number,  // コメントするissue番号
  "body": string          // コメントの内容
}
```
#### create_pull_request
新しいプルリクエストを作成します。
```typescript
{
  "owner": string,                  // リポジトリのオーナー
  "repo": string,                  // リポジトリ名
  "title": string,                 // PRのタイトル
  "body": string,                  // (任意) PRの説明
  "head": string,                  // 変更を含むブランチ
  "base": string,                  // マージ先のブランチ
  "draft": boolean,                // (任意) ドラフトPRとして作成
  "maintainer_can_modify": boolean // (任意) メンテナの編集を許可
}
```

#### search_repositories
GitHubリポジトリを検索します。
```typescript
{
  "query": string,    // 検索クエリ
  "page": number,     // (任意) ページ番号
  "perPage": number   // (任意) 1ページあたりの結果数（最大100）
}
```

#### search_code
コードを検索します。
```typescript
{
  "q": string,        // GitHub code search構文による検索クエリ
  "order": string,    // (任意) ソート順（'asc'または'desc'）
  "page": number,     // (任意) ページ番号
  "per_page": number  // (任意) 1ページあたりの結果数（最大100）
}
```

#### search_issues
issueとプルリクエストを検索します。
```typescript
{
  "q": string,        // GitHub issues search構文による検索クエリ
  "sort": string,     // (任意) ソートフィールド（comments, reactions, created等）
  "order": string,    // (任意) ソート順（'asc'または'desc'）
  "page": number,     // (任意) ページ番号
  "per_page": number  // (任意) 1ページあたりの結果数（最大100）
}
```

### puppeteer

#### puppeteer_navigate
ブラウザでURLに移動します。
```typescript
{
  "url": string,            // (必須) 移動先のURL
  "launchOptions": object,  // (任意) ブラウザの起動オプション
  "allowDangerous": boolean // (任意) セキュリティを下げる危険な設定を許可するかどうか
}
```
#### puppeteer_screenshot
ページ全体または特定要素のスクリーンショットを取得します。
```
{
  "name": string,     // (必須) スクリーンショットの名前
  "selector": string, // (任意) スクリーンショットを撮る要素のCSSセレクタ
  "width": number,    // (任意、デフォルト: 800) 幅
  "height": number    // (任意、デフォルト: 600) 高さ
}
```
#### puppeteer_click
ページ上の要素をクリックします。
```
{
  "selector": string  // (必須) クリックする要素のCSSセレクタ
}
```
#### puppeteer_hover
ページ上の要素にホバーします。
```
{
  "selector": string  // (必須) ホバーする要素のCSSセレクタ
}
```
#### puppeteer_fill
フォームの入力欄に値を入力します。
```
{
  "selector": string, // (必須) 入力欄のCSSセレクタ
  "value": string    // (必須) 入力する値
}
```
#### puppeteer_select
SELECT要素で値を選択します。
```
{
  "selector": string, // (必須) SELECT要素のCSSセレクタ
  "value": string    // (必須) 選択する値
}
```
#### puppeteer_evaluate
ブラウザコンソールでJavaScriptを実行します。
```
{
  "script": string   // (必須) 実行するJavaScriptコード
}
```

### notion

#### API-post-database-query
データベースをクエリします。
```typescript
{
  "database_id": string,       // (必須) Notionデータベースの識別子
  "filter_properties": string[], // (任意) 特定のページプロパティ値IDのリスト
  "filter": object,            // (任意) 返されるページを制限するフィルター条件
  "sorts": object[],           // (任意) 結果の並べ替え条件
  "start_cursor": string,      // (任意) このカーソル以降の結果を返します
  "page_size": number,         // (任意) レスポンスに含める項目数。最大: 100
  "archived": boolean,         // (任意) アーカイブされたアイテムを含めるか
  "in_trash": boolean          // (任意) ゴミ箱内のアイテムを含めるか
}
```

#### API-post-search
タイトルで検索します。
```typescript
{
  "query": string,          // (任意) ページとデータベースのタイトルと比較するテキスト
  "sort": object,           // (任意) 結果の並び順を決める条件
  "filter": object,         // (任意) 結果をページまたはデータベースのみに制限する条件
  "start_cursor": string,   // (任意) このカーソル以降の結果を返します
  "page_size": number       // (任意) レスポンスに含める項目数。最大: 100
}
```

#### API-get-block-children
ブロックの子要素を取得します。
```typescript
{
  "block_id": string,      // (必須) ブロックの識別子
  "start_cursor": string,  // (任意) このカーソル以降の結果を返します
  "page_size": number      // (任意) レスポンスに含める項目数。最大: 100
}
```

#### API-patch-block-children
ブロックの子要素を追加します。
```typescript
{
  "block_id": string,     // (必須) ブロックまたはページの識別子
  "children": object[],   // (必須) コンテナブロックに追加する子コンテンツ
  "after": string         // (任意) 新しいブロックを追加する位置の直前のブロックID
}
```

#### API-retrieve-a-block
ブロックを取得します。
```typescript
{
  "block_id": string     // (必須) Notionブロックの識別子
}
```

#### 9. API-update-a-block
ブロックを更新します。
```typescript
{
  "block_id": string,   // (必須) Notionブロックの識別子
  "type": string,       // (任意) 更新するプロパティを持つブロックタイプ
  "archived": boolean   // (任意) trueでブロックをアーカイブ、falseで復元
}
```

#### API-delete-a-block
ブロックを削除します。
```typescript
{
  "block_id": string    // (必須) Notionブロックの識別子
}
```

#### API-retrieve-a-page
ページを取得します。
```typescript
{
  "page_id": string,           // (必須) Notionページの識別子
  "filter_properties": string[] // (任意) 特定のページプロパティ値IDのリスト
}
```

#### API-patch-page
ページのプロパティを更新します。
```typescript
{
  "page_id": string,      // (必須) 更新するNotionページの識別子
  "properties": object,   // (任意) 更新するページのプロパティ値
  "in_trash": boolean,    // (任意) trueでブロックを削除、falseで復元
  "archived": boolean,    // (任意) アーカイブ状態
  "icon": object,         // (任意) ページのアイコン
  "cover": object         // (任意) ページのカバー画像
}
```

#### API-post-page
ページを作成します。
```typescript
{
  "parent": object,       // (必須) 親オブジェクト
  "properties": object,   // (必須) ページのプロパティ
  "children": object[],   // (任意) 新しいページにレンダリングするコンテンツ
  "icon": object,         // (任意) 新しいページのアイコン
  "cover": object         // (任意) 新しいページのカバー画像
}
```

#### API-create-a-database
データベースを作成します。
```typescript
{
  "parent": object,       // (必須) 親オブジェクト
  "properties": object,   // (必須) データベースのプロパティスキーマ
  "title": object[]       // (任意) データベースのタイトル
}
```

#### API-update-a-database
データベースを更新します。
```typescript
{
  "database_id": string,  // (必須) Notionデータベースの識別子
  "title": object[],      // (任意) データベースのタイトル
  "description": object[], // (任意) データベースの説明
  "properties": object    // (任意) データベースのプロパティスキーマ
}
```

#### API-retrieve-a-database
データベースを取得します。
```typescript
{
  "database_id": string   // (必須) Notionデータベースの識別子
}
```

#### API-retrieve-a-page-property
ページのプロパティ項目を取得します。
```typescript
{
  "page_id": string,      // (必須) Notionページの識別子
  "property_id": string,  // (必須) ページプロパティの識別子
  "page_size": number,    // (任意) 1ページあたりのプロパティ項目数。デフォルト: 100
  "start_cursor": string  // (任意) ページ分割されたプロパティのカーソル
}
```

#### 18. API-retrieve-a-comment
コメントを取得します。
```typescript
{
  "block_id": string,     // (必須) NotionブロックまたはページのID
  "start_cursor": string, // (任意) このカーソル以降の結果を返します
  "page_size": number     // (任意) レスポンスに含める項目数。最大: 100
}
```

#### API-create-a-comment
コメントを作成します。
```typescript
{
  "parent": object,       // (必須) コメントを含むページ
  "rich_text": object[]   // (必須) コメントのリッチテキスト内容
}
```

## ワークフロー

### ステップ1
プロジェクト内で関連のありそうなコードを確認する

### ステップ3
必要があれば、パッケージなどのドキュメントのページを確認する
※ ドキュメントのURLがわからない場合は、ユーザーに確認する

### ステップ4
issueを作成する

### ステップ5
ブランチを作成する

### ステップ6
ブランチを切り替える

### ステップ7
必要なファイルを作成・更新し、コミットする

### ステップ8
コミットをプッシュする

### ステップ9
プルリクを作成し、変更のレビュー依頼を行う

### ステップ10
notionのデータベースに関連のドキュメントがある場合は、更新する
notionのデータベースに関連のドキュメントがない場合は、作成する